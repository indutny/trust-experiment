#!/usr/bin/env node
'use strict';

const assert = require('assert');
const fs = require('fs');
const binding = require('bindings')('graph');

const MAX_DEPTH = 3;
const MAXIMIZE = 200000;

const Graph = require('../');

console.error('Reading file');
const raw = fs.readFileSync(process.argv[2]);

console.error('Deduping');
const users = binding.dedup(raw);
console.error('Deduping done');

function shuffle(arr) {
  for (var i = 0; i < arr.length - 1; i++) {
    const j = Math.floor(i + Math.random() * (arr.length - i));

    const t = arr[i];
    arr[i] = arr[j];
    arr[j] = t;
  }
}

const buckets = new Array(MAX_DEPTH + 1).fill(0);

function test(to) {
  console.error('Testing user=%d', to);
  const bfs = binding.bfs(raw, to, MAX_DEPTH);
  if (bfs.length === 0) {
    console.error('Not reachable, skipping');
    return false;
  }

  console.error('Got reachable users=%d', bfs.length >> 2);
  const g = new Graph(to, {
    maxDepth: MAX_DEPTH,
    maximize: MAXIMIZE
  });

  const links = [];
  const users = [];
  for (let i = 0; i < bfs.length; i += 4) {
    const user = bfs.readUInt32LE(i);
    users.push(user);
  }
  shuffle(users);

  for (let i = 0; i < users.length; i++) {
    const user = users[i];

    const range = binding.binarySearch(raw, user);
    if (!range)
      continue;

    const end = range[1];
    for (let off = range[0]; off < end; off += 8) {
      assert(user === raw.readUInt32LE(off));
      const follower = raw.readUInt32LE(off + 4);

      g.link(follower, user);
    }
  }

  console.error('Got links');
  for (var i = 0; i < bfs.length; i += 4) {
    const from = bfs.readUInt32LE(i);
    if (from === to)
      continue;

    const route = g.build(from);
    const length = route ? route.length : 0;
    buckets[length]++;
  }

  return true;
}

for (;;) {
  const to = users.readUInt32LE(((Math.random() * users.length) >>> 2) << 2);

  if (!test(to))
    continue;
  console.log(buckets.join(', '));
}
